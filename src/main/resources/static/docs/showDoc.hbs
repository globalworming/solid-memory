<!DOCTYPE html>
<html lang="en">
<head>
    <title>Doc</title>
    <script src="/js/pdfjs-3.1.81-dist/pdf.js"></script>
    {{> "head.hbs" }}
    <style>
        header {
            position: fixed;
            color: white;
            background: black;
            width: 100%;
            padding: 5px;
            display: flex;
            justify-content: center;
            align-items: baseline;
            gap: 1%;
        }
    </style>
</head>
<body>
<header>
    <span>Page: <span id="page_num"></span> / <span id="page_count"></span></span>
    {{#> atom/button.hbs id="prev" }}
        Previous
    {{/ atom/button.hbs }}
    {{#> atom/button.hbs id="next"}}
        Next
    {{/ atom/button.hbs }}
    {{#if accessRule.permitDownload}}
        {{> organism/pdfDownload.hbs}}
    {{/if}}
</header>
<main>
    <div style="width: 98%; margin: 0; padding: 1%; background: #c7c7c7; padding-top:3em">
        <canvas style="width: 100%" id="the-canvas"></canvas>
    </div>
    <script type="text/javascript">

        var pdfData = atob('{{{ base64Pdf }}}');
        var pdfDoc = null,
                pageNum = 1,
                pageRendering = false,
                pageNumPending = null,
                scale = 4,
                canvas = document.getElementById('the-canvas'),
                ctx = canvas.getContext('2d');

        /**
         * Get page info from document, resize canvas accordingly, and render page.
         * @param num Page number.
         */
        function renderPage(num) {
            pageRendering = true;
            // Using promise to fetch the page
            pdfDoc.getPage(num).then(function (page) {
                var viewport = page.getViewport({scale: scale});
                canvas.height = viewport.height;
                canvas.width = viewport.width;

                // Render PDF page into canvas context
                var renderContext = {
                    canvasContext: ctx,
                    viewport: viewport
                };
                var renderTask = page.render(renderContext);

                // Wait for rendering to finish
                renderTask.promise.then(function () {
                    pageRendering = false;
                    if (pageNumPending !== null) {
                        // New page rendering is pending
                        renderPage(pageNumPending);
                        pageNumPending = null;
                    }
                });
            });

            // Update page counters
            document.getElementById('page_num').textContent = num;
        }

        /**
         * If another page rendering in progress, waits until the rendering is
         * finised. Otherwise, executes rendering immediately.
         */
        function queueRenderPage(num) {
            if (pageRendering) {
                pageNumPending = num;
            } else {
                renderPage(num);
            }
        }

        /**
         * Displays previous page.
         */
        function onPrevPage() {
            if (pageNum <= 1) {
                return;
            }
            pageNum--;
            queueRenderPage(pageNum);
        }

        document.getElementById('prev').addEventListener('click', onPrevPage);

        /**
         * Displays next page.
         */
        function onNextPage() {
            if (pageNum >= pdfDoc.numPages) {
                return;
            }
            pageNum++;
            queueRenderPage(pageNum);
        }

        document.getElementById('next').addEventListener('click', onNextPage);

        /**
         * Asynchronously downloads PDF.
         */
        pdfjsLib.getDocument({data: pdfData}).promise.then(function (pdfDoc_) {
            pdfDoc = pdfDoc_;
            document.getElementById('page_count').textContent = pdfDoc.numPages;

            // Initial/first page rendering
            renderPage(pageNum);
        });

    </script>
</main>
{{> "molecule/footer.hbs" }}
</body>
</html>